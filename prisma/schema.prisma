// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Show {
    id        String    @id @default(uuid())
    name      String    @db.Text
    slug      String    @unique @db.Text
    location  String    @db.Text
    startDate DateTime
    endDate   DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    parent    Show?     @relation("ParentShow", fields: [parentId], references: [id])
    parentId  String?
    children  Show[]    @relation("ParentShow")
    Photo     Photo[]

    @@index([parentId])
}

model Photo {
    id        String   @id @default(uuid())
    showId    String
    show      Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now()) @updatedAt
    accounts      Account[]
    sessions      Session[]
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
