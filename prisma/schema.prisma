// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Show {
    id        String    @id @default(uuid())
    name      String    @db.Text
    slug      String    @unique @db.Text
    location  String    @db.Text
    startDate DateTime
    endDate   DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    parent    Show?     @relation("ParentShow", fields: [parentId], references: [id])
    parentId  String?
    children  Show[]    @relation("ParentShow")
    Photo     Photo[]

    @@index([parentId])
}

model Photo {
    id        String      @id @default(uuid())
    showId    String
    show      Show        @relation(fields: [showId], references: [id], onDelete: Cascade)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @default(now()) @updatedAt
    Purchases Purchases[]

    @@index([showId])
}

model Purchases {
    id               String   @id @default(uuid())
    photoId          String
    photo            Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
    userId           String
    stripeCheckoutId String?  @default(uuid())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @default(now()) @updatedAt

    @@unique([photoId, userId])
    @@index([photoId, userId])
}

enum UserRole {
    USER
    ADMIN
}

model UserRoleRelation {
    id          String   @id @default(uuid())
    clerkUserId String
    role        UserRole
}
